name: jdk11-gradle-ci

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: "Docker TAG"
        required: true
        default: "master"
jobs:
  build:
    runs-on: [self-hosted, Linux, X64]    ### ubuntu-latest 에서 업데이트 됨
    env:
      GRADLE_HOME: /actions-runner/build-tools/gradle/6.7.1/gradle-6.7.1-bin/gradle-6.7.1/
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'jdkfile'    # required
        jdkFile: /actions-runner/languages/java/microsoft-jdk-11.0.11-linux-x64.tar.gz
        java-version: '11.0.11'       # 여기에 사용할 버전을 명시합니다.
        architecture: x64
        cache: gradle                 # 사용 가능한 옵션은 maven / gradle / sbt 중 1개입니다.

    - name: Check Gradle version
      run: |
        $GRADLE_HOME/bin/gradle --version

    - name: Java Path Settings
      run: |
        java -version
        echo "JAVA_HOME is set to $JAVA_HOME"

    - name: Gradle Settings
      run: |
        $GRADLE_HOME/bin/gradle --version

    - name: Configure gradle properties
      run: |
        mkdir -p ~/.gradle
        echo "nexusUsername=${{ secrets.NEXUS_ID }}" >> ~/.gradle/gradle.properties
        echo "nexusPassword=${{ secrets.NEXUS_PASSWORD }}" >> ~/.gradle/gradle.properties

    - name: Gradle Build
      run: |
        $GRADLE_HOME/bin/gradle clean bootJar

    - name: Log in to Docker Hub
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_URL }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Set Timezone
      uses: szenius/set-timezone@v2.0
      with:
        # Desired timezone for Linux
        timezoneLinux: Asia/Seoul

    - name: set env  # TAG 를 현재 시간으로 설정
      run: echo "NOW=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
       
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: appdu/appdu-portal-backend
        tags: ${{ env.NOW }} # ${{ github.event.inputs.name }}

    - name: Build and Push to ACR
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: ./Dockerfile
        platforms: linux/amd64
        tags: ${{ secrets.AZURE_URL }}/${{ steps.meta.outputs.tags }}
        
    # kustomize 명령을 가져온다.
    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
 
    - name: Checkout kustomize repository
      uses: actions/checkout@v2
      with:
        # kubernetes 설정정보 저장소
        repository: ${{ github.repository_owner }}/${{ env.GIT_OPS_NAME }}
        ref: main
        # 다른 저장소에 push 하려면 Personal Access Token이 필요.
        token: ${{ secrets.ACTION_TOKEN }} # ${{ secrets.GITHUB_TOKEN }} 
        path: ${{ env.GIT_OPS_NAME }}
         
    # 새 이미지 버전으로 파일 수정
    - name: Update Kubernetes resources
      run: |
        pwd
        cd ${{ env.GIT_OPS_NAME }}/${{ env.OPS_DIR }}
        kustomize edit set image ${{ secrets.AZURE_URL }}/${{ steps.meta.outputs.tags }}
        cat kustomization.yaml
 
    # 수정된 파일 commit & push
    - name: Commit minifest files
      run: |
        cd ${{ env.GIT_OPS_NAME }}/${{ env.OPS_DIR }}
        git checkout HEAD
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git commit -am 'update image tag  ${{ env.NOW }} from Github Action'
        cat kustomization.yaml
        git push origin HEAD
